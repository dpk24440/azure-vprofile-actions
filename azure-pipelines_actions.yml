trigger:
  branches:
    include:
      - main

variables:
- group: vprofilevariables  # Ensure this group contains all needed variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, REGISTRY, ECR_REPOSITORY, EKS_CLUSTER, SONAR_PROJECT_KEY, SONAR_ORGANIZATION, SONAR_URL, SONAR_TOKEN)

stages:
# ------------------------------
# 1. Build Stage
# ------------------------------
- stage: Build
  displayName: Build Java Project
  jobs:
  - job: Build
    displayName: Compile Java Code
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: JavaToolInstaller@1
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - script: mvn clean compile
      displayName: 'Build with Maven'

# ------------------------------
# 2. SonarQube Analysis Stage
# ------------------------------
- stage: CodeAnalysis
  displayName: SonarCloud Code Analysis
  dependsOn: Build
  jobs:
  - job: SonarCloudScan
    displayName: Run SonarCloud Scanner
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: JavaToolInstaller@1
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: Maven@3
      displayName: 'Build Project'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'
        options: '-DskipTests'

    - script: |
        echo "Setting up environment..."
        sudo apt-get update && sudo apt-get install -y unzip curl

        echo "Downloading SonarScanner CLI..."
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006.zip
        unzip -q sonar-scanner.zip
        export PATH="$(pwd)/sonar-scanner-5.0.1.3006/bin:$PATH"

        echo "Compiling Java code..."
        mvn clean compile -DskipTests

        echo "Running SonarCloud Analysis..."
        sonar-scanner \
          -Dsonar.projectKey=$(SONAR_PROJECT_KEY) \
          -Dsonar.organization=$(SONAR_ORGANIZATION) \
          -Dsonar.sources=. \
          -Dsonar.inclusions=**/*.java,**/*.py,**/*.js \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.host.url=$(SONAR_URL) \
          -Dsonar.login=$(SONAR_TOKEN) \
          -Dsonar.verbose=true
      displayName: 'Run SonarCloud Scanner'
      env:
        SONAR_PROJECT_KEY: 'vprofile-action240_vprofile24'
        SONAR_ORGANIZATION: 'vprofile-action24'
        SONAR_URL: 'https://sonarcloud.io'
        SONAR_TOKEN: $(SONAR_TOKEN)
# ------------------------------
# 2. Testing Stage (Optional)
# ------------------------------
- stage: Testing
  displayName: Run Unit Tests
  dependsOn: CodeAnalysis
  jobs:
  - job: RunTests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - script: |
        echo "Running unit tests..."
        # TODO: replace with actual test command like ./gradlew test or mvn test
      displayName: 'Run Unit Tests'

# ------------------------------
# 3. Build, Push to ECR, Deploy to EKS
# ------------------------------
- stage: BuildAndDeploy
  displayName: Build Docker Image and Deploy to EKS
  dependsOn: Testing
  jobs:
  - job: BuildPushDeploy
    displayName: Docker Build, Push to ECR & Helm Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    # Configure AWS CLI
    - script: |
        aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
        aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
        aws configure set region $(AWS_REGION)
      displayName: 'Configure AWS CLI'

    # Login to Amazon ECR
    - script: |
        aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(REGISTRY)
      displayName: 'Login to Amazon ECR'

    # Build, tag, and push Docker images
    - script: |
        docker build -t $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId) .
        docker tag $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId) $(REGISTRY)/$(ECR_REPOSITORY):latest
        docker push $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId)
        docker push $(REGISTRY)/$(ECR_REPOSITORY):latest
      displayName: 'Build and Push Docker Image to ECR'

    # Update kubeconfig for EKS cluster
    - script: |
        aws eks update-kubeconfig --region $(AWS_REGION) --name $(EKS_CLUSTER)
      displayName: 'Configure kubectl for EKS'

    # Create Kubernetes docker-registry secret (if not exists)
    - script: |
        # Get ECR password dynamically here so kubectl gets it correctly
        ECR_PASSWORD=$(aws ecr get-login-password --region $(AWS_REGION))
        kubectl create secret docker-registry regcred \
          --docker-server=$(REGISTRY) \
          --docker-username=AWS \
          --docker-password=$ECR_PASSWORD \
          --docker-email=your-email@example.com || echo "Secret 'regcred' already exists"
      displayName: 'Create Kubernetes Secret for ECR'

    # Deploy Helm chart with image and tag overrides
    - script: |
        helm upgrade --install vprofile-stack helm/vprofilecharts \
          --set appimage=$(REGISTRY)/$(ECR_REPOSITORY) \
          --set apptag=$(Build.BuildId) \
          --namespace default
      displayName: 'Deploy Helm Chart to EKS'
