trigger:
  branches:
    include:
      - main

variables:
- group: vprofilevariables


stages:
# ------------------------------
# 1. Code Quality - SonarQube
# ------------------------------
- stage: CodeAnalysis
  displayName: SonarQube Analysis
  jobs:
  - job: SonarQubeScan
    displayName: Run SonarQube Scanner
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: JavaToolInstaller@1
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonar-connection'
        organization: 'vprofile-action240'
        scannerMode: 'MSBuild'
        projectKey: 'vprofile-action240_vprofile24'
        projectName: 'vprofile'
      displayName: 'Run SonarQube Scanner'
   
    - script: mvn test
      displayName: 'Run Maven Tests'

    - script: mvn checkstyle:checkstyle
      displayName: 'Run Checkstyle'

    - task: SonarCloudAnalyze@1
      displayName: 'Analyze Code'

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publish SonarQube Results'
      
# ------------------------------
# 2. Testing Stage (Optional)
# ------------------------------
- stage: Testing
  displayName: Run Unit Tests
  dependsOn: CodeAnalysis
  jobs:
  - job: RunTests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - script: |
        echo "Running unit tests..."
        # ./gradlew test or mvn test
      displayName: 'Run Tests'

# ------------------------------
# 3. Build, Push to ECR, Deploy to EKS
# ------------------------------
- stage: BuildAndDeploy
  displayName: Build Docker Image and Deploy to EKS
  dependsOn: Testing
  jobs:
  - job: BuildPushDeploy
    displayName: Docker Build, Push to ECR & Helm Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - script: |
        aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
        aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
        aws configure set default.region $(AWS_REGION)
      displayName: 'Configure AWS CLI'

    - script: |
        aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(REGISTRY)
      displayName: 'Login to Amazon ECR'

    - script: |
        docker build -t $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId) .
        docker tag $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId) $(REGISTRY)/$(ECR_REPOSITORY):latest
        docker push $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId)
        docker push $(REGISTRY)/$(ECR_REPOSITORY):latest
      displayName: 'Build and Push Docker Image to ECR'

    - script: |
        aws eks update-kubeconfig --region $(AWS_REGION) --name $(EKS_CLUSTER)
      displayName: 'Configure kubectl for EKS'

    - script: |
        kubectl create secret docker-registry regcred \
          --docker-server=$(REGISTRY) \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region $(AWS_REGION)) \
          --docker-email=your-email@example.com || echo "Secret already exists"
      displayName: 'Create Kubernetes Secret for ECR'

    - script: |
        helm upgrade --install vprofile-stack helm/vprofilecharts \
          --set appimage=$(REGISTRY)/$(ECR_REPOSITORY) \
          --set apptag=$(Build.BuildId) \
          --namespace default
      displayName: 'Deploy Helm Chart to EKS'