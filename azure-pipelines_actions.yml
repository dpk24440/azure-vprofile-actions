trigger:
  branches:
    include:
      - main

variables:
- group: vprofilevariables  # Ensure this group contains all needed variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, REGISTRY, ECR_REPOSITORY, EKS_CLUSTER, SONAR_PROJECT_KEY, SONAR_ORGANIZATION, SONAR_URL, SONAR_TOKEN)

stages:
  - stage: Test
    displayName: Testing and Analysis
    jobs:
      - job: Testing
        displayName: Run Unit Tests & Sonar Analysis
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Checkout@1

          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '11'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'

          - script: mvn test
            displayName: 'Run Maven Tests'

          - script: mvn checkstyle:checkstyle
            displayName: 'Run Checkstyle'

          - script: |
              echo "Downloading SonarScanner CLI..."
              curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006.zip
              unzip -q sonar-scanner.zip
              export PATH="$(pwd)/sonar-scanner-5.0.1.3006/bin:$PATH"
              echo "Running SonarCloud Analysis..."
              sonar-scanner -X \
                -Dsonar.host.url=$(SONAR_URL) \
                -Dsonar.login=$(SONAR_TOKEN) \
                -Dsonar.organization=$(SONAR_ORGANIZATION) \
                -Dsonar.projectKey=$(SONAR_PROJECT_KEY) \
                -Dsonar.sources=src/ \
                -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                -Dsonar.junit.reportsPath=target/surefire-reports/ \
                -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
                -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
            displayName: 'Run SonarCloud Scanner'

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'

          - script: pip install reportlab
            displayName: 'Install Python Dependencies'

          - script: python sonar_report.py
            displayName: 'Generate SonarQube Report'
            env:
              SONAR_URL: $(SONAR_URL)
              SONAR_TOKEN: $(SONAR_TOKEN)
              SONAR_PROJECT_KEY: $(SONAR_PROJECT_KEY)

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(System.DefaultWorkingDirectory)/sonarqube_report_*.pdf'
              ArtifactName: 'SonarQube-Report'

  - stage: Build_And_Deploy
    displayName: Build & Push Docker, Deploy to EKS
    dependsOn: Test
    jobs:
      - job: BuildAndDeploy
        displayName: Docker Build & Helm Deploy
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AWSCLI@1
            inputs:
              awsCredentials: 'eks-aws-connection'
              regionName: '$(AWS_REGION)'

          - task: Checkout@1

          - script: |
              aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(REGISTRY)
            displayName: 'Login to Amazon ECR'

          - script: |
              docker build -t $(REGISTRY)/$(ECR_REPOSITORY):latest .
              docker tag $(REGISTRY)/$(ECR_REPOSITORY):latest $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId)
              docker push $(REGISTRY)/$(ECR_REPOSITORY):latest
              docker push $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId)
            displayName: 'Build & Push Docker Image'

          - script: |
              aws eks update-kubeconfig --region $(AWS_REGION) --name $(EKS_CLUSTER)
            displayName: 'Configure kubectl'

          - script: |
              if kubectl get secret regcred --namespace default; then
                echo "Updating regcred"
                kubectl delete secret regcred --namespace default
              fi
              kubectl create secret docker-registry regcred \
                --docker-server=$(REGISTRY) \
                --docker-username=AWS \
                --docker-password=$(aws ecr get-login-password --region $(AWS_REGION)) \
                --docker-email=your-email@example.com
            displayName: 'Create or Update Kubernetes Secret for ECR'

          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: 'latest'

          - script: |
              helm upgrade --install kubeproj-stack helm/kubecharts \
                --namespace default \
                --set appimage=$(REGISTRY)/$(ECR_REPOSITORY) \
                --set apptag=$(Build.BuildId)
            displayName: 'Deploy via Helm'