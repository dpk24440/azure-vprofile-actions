trigger:
  branches:
    include:
      - main

variables:
- group: vprofilevariables


stages:
# ------------------------------
# 1. Code Quality - SonarQube
# ------------------------------
- stage: CodeAnalysis
  displayName: SonarQube Analysis
  jobs:
  - job: SonarQubeScan
    displayName: Run SonarQube Scanner
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: JavaToolInstaller@1
      inputs:
        versionSpec: '17'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonar-connection'
        organization: 'vprofile-action240'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'vprofile-action240_vprofile24'
        cliSources: '.'
        extraProperties: |
          sonar.sources=src/main/java
          sonar.tests=src/test/java
          sonar.java.binaries=target
          sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      displayName: 'Prepare SonarCloud analysis'

   

    - script: mvn clean verify sonar:sonar
      displayName: 'Run Sonar Maven Analysis'
      env:
        SONAR_TOKEN: $(SONAR_TOKEN)


    - script: mvn checkstyle:checkstyle
      displayName: 'Run Checkstyle'
    
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean verify sonar:sonar'
        options: >
          -Dsonar.projectKey=$(SONAR_PROJECT_KEY)
          -Dsonar.organization=$(SONAR_ORGANIZATION)
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.login=$(SONAR_TOKEN)
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false

    - task: SonarCloudAnalyze@1
      displayName: 'Analyze Code'

    - task: SonarCloudPublish@2
      displayName: 'Publish Quality Gate Result'
      inputs:
        pollingTimeoutSec: '300'

      
# ------------------------------
# 2. Testing Stage (Optional)
# ------------------------------
- stage: Testing
  displayName: Run Unit Tests
  dependsOn: CodeAnalysis
  jobs:
  - job: RunTests
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - script: |
        echo "Running unit tests..."
        # ./gradlew test or mvn test
      displayName: 'Run Tests'

# ------------------------------
# 3. Build, Push to ECR, Deploy to EKS
# ------------------------------
- stage: BuildAndDeploy
  displayName: Build Docker Image and Deploy to EKS
  dependsOn: Testing
  jobs:
  - job: BuildPushDeploy
    displayName: Docker Build, Push to ECR & Helm Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - script: |
        aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
        aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
        aws configure set default.region $(AWS_REGION)
      displayName: 'Configure AWS CLI'

    - script: |
        aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(REGISTRY)
      displayName: 'Login to Amazon ECR'

    - script: |
        docker build -t $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId) .
        docker tag $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId) $(REGISTRY)/$(ECR_REPOSITORY):latest
        docker push $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId)
        docker push $(REGISTRY)/$(ECR_REPOSITORY):latest
      displayName: 'Build and Push Docker Image to ECR'

    - script: |
        aws eks update-kubeconfig --region $(AWS_REGION) --name $(EKS_CLUSTER)
      displayName: 'Configure kubectl for EKS'

    - script: |
        kubectl create secret docker-registry regcred \
          --docker-server=$(REGISTRY) \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region $(AWS_REGION)) \
          --docker-email=your-email@example.com || echo "Secret already exists"
      displayName: 'Create Kubernetes Secret for ECR'

    - script: |
        helm upgrade --install vprofile-stack helm/vprofilecharts \
          --set appimage=$(REGISTRY)/$(ECR_REPOSITORY) \
          --set apptag=$(Build.BuildId) \
          --namespace default
      displayName: 'Deploy Helm Chart to EKS'