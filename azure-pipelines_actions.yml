trigger:
- main

variables:
- group: vprofilevariables  # Make sure all required variables are stored here

stages:
# ---------------------- Stage 1: Testing ----------------------
- stage: Testing
  displayName: Maven Tests and Code Quality
  jobs:
  - job: JavaTests
    displayName: Run Unit Tests and SonarQube Scan
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - script: mvn test
      displayName: 'Run Maven Tests'

    - script: mvn checkstyle:checkstyle
      displayName: 'Run Checkstyle'

    - script: |
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006.zip
        unzip sonar-scanner.zip -d $HOME
        export PATH="$HOME/sonar-scanner-5.0.1.3006/bin:$PATH"
        sonar-scanner \
          -Dsonar.projectKey=$(SONAR_PROJECT_KEY) \
          -Dsonar.sources=src \
          -Dsonar.host.url=$(SONAR_URL) \
          -Dsonar.login=$(SONAR_TOKEN) \
          -Dsonar.organization=$(SONAR_ORGANIZATION) \
          -Dsonar.jacoco.reportPaths=target/jacoco.exec \
          -Dsonar.junit.reportPaths=target/surefire-reports/ \
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
          -Dsonar.verbose=true
      displayName: 'Run SonarQube Scanner'

# ----------------- Build & Deploy Stage -----------------
- stage: BuildAndDeploy
  displayName: Build Docker Image and Deploy to EKS
  dependsOn: Testing
  jobs:
    - job: BuildPushDeploy
      displayName: Docker Build, Push to ECR & Helm Deploy
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - script: |
            aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
            aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
            aws configure set region $(AWS_REGION)
          displayName: 'Configure AWS CLI'

        - script: |
            aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(REGISTRY)
          displayName: 'Login to Amazon ECR'

        - script: |
            docker build -t $(REGISTRY)/$(ECR_REPOSITORY):latest .
            docker tag $(REGISTRY)/$(ECR_REPOSITORY):latest $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId)
            docker push $(REGISTRY)/$(ECR_REPOSITORY):latest
            docker push $(REGISTRY)/$(ECR_REPOSITORY):$(Build.BuildId)
          displayName: 'Build and Push Docker Image to ECR'

        - script: |
            aws eks update-kubeconfig --region $(AWS_REGION) --name $(EKS_CLUSTER)
          displayName: 'Configure kubectl for EKS'

        - script: |
            kubectl create secret docker-registry regcred \
              --docker-server=$(REGISTRY) \
              --docker-username=AWS \
              --docker-password=$(aws ecr get-login-password --region $(AWS_REGION)) \
              --docker-email=your-email@example.com || echo "Secret already exists"
          displayName: 'Create Kubernetes Secret for ECR'

        - script: |
            helm upgrade --install vprofile-stack helm/vprofilecharts \
              --set appimage=$(REGISTRY)/$(ECR_REPOSITORY) \
              --set apptag=$(Build.BuildId) \
              --namespace default
          displayName: 'Deploy Helm Chart to EKS'
